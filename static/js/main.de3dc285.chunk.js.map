{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","headers","Service-Worker","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.de3dc285.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n    return (\r\n        <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div className='tc'>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n    console.log('CardList');\r\n    return (\r\n        <div>\r\n            {\r\n            robots.map((user,i) => {\r\n                return (<Card \r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email} />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n    console.log('SearchBox')\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n            aria-label='Search Robots'\r\n            className='pa3 ba b--green bg-lightest-blue' \r\n            type='seach' \r\n            placeholder='Search robots'\r\n            onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'3px solid black',height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n    \r\n    //The \"catch\" like in the try catch blocks\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        const {hasError} = this.state;\r\n        return hasError? <h1>Oooops! That is not good</h1> :\r\n        this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    \r\n    shouldComponentUpdate(nextProps,nextState){\r\n        if(this.state.count!==nextState.count)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: state.count + 1}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        console.log('CounterButton')\r\n        return (\r\n            <button color={this.props.color}\r\n            onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps,nextState){\r\n    //     return false;\r\n    // }\r\n\r\n    render(){\r\n        console.log('Header')\r\n        return (\r\n            <div>\r\n                <h1 className='f2'>RoboFriends</h1>\r\n                <CounterButton color={'red'}/>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default Header;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport {setSearchField, requestRobots} from '../actions';\r\nimport {connect} from  'react-redux';\r\nimport Header from '../components/Header';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending : state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => requestRobots(dispatch)\r\n    }\r\n}\r\n\r\nclass App extends Component  {\r\n   \r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n   render(){\r\n    const {searchField, onSearchChange,robots,isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot=>{\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return isPending?\r\n    <h1 className='tc'>Loading...</h1>\r\n    :(\r\n        <div className='tc'>\r\n            <Header/>\r\n            <SearchBox searchChange={onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots = {filteredRobots}/>\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </div>\r\n        \r\n    );\r\n   }\r\n}\r\n\r\n/*connect() - connects the App Component and subscribe to any \r\nstate changes in the redux store, now the App knows that there's\r\na redux store somewhere and any time there's a change to it,\r\nit may be intrested in that change*/\r\n\r\n/* 'mapStateToProps' -  what state shd I listen to\r\n  'mapDispatchToProps' - what dispatch/action shd I listen to */\r\nexport default \r\nconnect(mapStateToProps,mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})\r\n\r\n\r\nexport const requestRobots = (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}));\r\n    \r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } from \"./constants\"\r\n\r\n//Different initial State for each reducer \r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\n\r\n//Reducers\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        /*If something changes in the search input\r\n        return new state with the input changes*/\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchField: action.payload});\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots= {\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots:action.payload,isPending:false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error: action.payload,isPending:false});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//Helps with logging and monitoring actions\nimport {createLogger} from 'redux-logger';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport { searchRobots,requestRobots } from './reducers';\n//Handles asynchronous actions\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\n//Combines the two reducers (or more if needed)\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    {/*Provider Component takes care of passing\n    down the store function through the App's\n    childern efficiently */}\n    <Provider store = {store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}